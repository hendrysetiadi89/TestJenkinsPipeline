pipeline {
    agent any
    environment {
        VARIABLE_COBA_COBA = "aaa"
    }
    parameters{
        choice(choices: ['customerapp', 'sellerapp'], description: 'which app', name: 'Application')
        string(defaultValue: '', description: 'put branch name or tag', name: 'BranchName', trim: true)
        booleanParam(defaultValue: false, description: 'which app', name: 'IsRelease')
    }
    stages {
        stage('Meng-clone') {
            steps {
                script{
                    currentBuild.description = "${params.Application} ${params.BranchName} ${params.IsRelease}"
                    if(params.BranchName.startsWith('tags')) {
                        checkout([$class: 'GitSCM',
                                  branches: [[name: "refs/${params.BranchName}"]],
                                  userRemoteConfigs: [[
                                                              //credentialsId: 'GITHUB_CRED',
                                                              refspec: "+refs/tags/*:refs/remotes/origin/tags/*",
                                                              url: 'https://github.com/hendrysetiadi89/HelloWorldTest'
                                                      ]],
                                  extensions: [[$class: 'CloneOption', reference: '', shallow: true, timeout: 30]]
                        ])
                    } else {
                        checkout([$class: 'GitSCM',
                                  branches: [[name: "${params.BranchName}"]],
                                  userRemoteConfigs: [[
                                                              //credentialsId: 'GITHUB_CRED',
                                                              name: 'origin',
                                                              refspec: "+refs/heads/${params.BranchName}:refs/remotes/origin/${params.BranchName}",
                                                              url: 'https://github.com/hendrysetiadi89/HelloWorldTest'
                                                      ]],
                                  extensions: [[
                                                       $class: 'CloneOption',
                                                       noTags: true,
                                                       honorRefspec: true,
                                                       reference: '',
                                                       shallow: true,
                                                       timeout: 30
                                               ]]
                        ])
                    }
                }
            }
            post {
                success {
                    echo 'Clone Success'
                }
            }
        }
        stage('Nge-build') {
            steps {
                // step untuk build apk
                echo "Siap Build nih"
                script {
                    if (params.IsRelease) {
                        sh 'gradle assembleRelease'
                    } else {
                        sh 'gradle assembleDebug'
                    }
                }
            }
            post {
                success {
                    archiveArtifacts(artifacts: '**/*.apk', allowEmptyArchive: true)
                }
            }
        }
    }
    post {
        always {
            echo 'Finished Job'
        }
        success {
            echo 'Success Job'
        }
        failure {
            echo 'Gagal Job'
        }
    }
}